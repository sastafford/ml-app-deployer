<export><workspace name="Workspace"><query name="Query 1" focus="false" active="true" content-source="as:5565535034147950703:" mode="xquery">fn:doc("/foo/doc2.xml")</query><query name="Query 2" focus="false" active="true" content-source="as:5565535034147950703:" mode="xquery">xquery version "1.0-ml";

declare namespace qconsole="http://marklogic.com/appservices/qconsole";

declare variable $user as xs:string := "admin";
declare variable $workspace as xs:string := "Workspace";

declare function local:do-eval($query as xs:string, $vars) {
  xdmp:eval($query, $vars, 
      &lt;options xmlns="xdmp:eval"&gt;
      &lt;database&gt;{xdmp:database("App-Services")}&lt;/database&gt;
      &lt;/options&gt;)
};

declare function local:get-ws-uri($user as xs:string, $workspace as xs:string) {
  let $ws-query := 'xquery version "1.0-ml";
    declare namespace qconsole = "http://marklogic.com/appservices/qconsole";
    declare variable $user as xs:string external;
    declare variable $workspace as xs:string external;
    cts:uris((), (), cts:and-query((
        cts:directory-query("/workspaces/"),
        cts:element-value-query(xs:QName("qconsole:userid"), xs:string(xdmp:user($user))),
        cts:element-value-query(xs:QName("qconsole:name"), $workspace)
    ))
    )'
  return local:do-eval($ws-query, (xs:QName("user"), $user, xs:QName("workspace"), $workspace))
};

declare function local:get-workspace($ws-uri as xs:string) {
  let $query := "declare variable $ws-uri as xs:string external; fn:doc($ws-uri)"
  return local:do-eval($query, (xs:QName("ws-uri"), $ws-uri))
};

let $workspace := ($workspace, "Workspace")[1]
let $user := ($user, xdmp:get-current-user())[1]

let $ws-uri := local:get-ws-uri($user, $workspace)
let $ws := local:get-workspace($ws-uri)
let $queries := 
    for $q in $ws/qconsole:workspace/qconsole:queries/qconsole:query
    return 
      &lt;query name="{string($q/qconsole:name)}" focus="{string($q/qconsole:focus)}" active="{string($q/qconsole:active)}" mode="{string($q/qconsole:mode)}"&gt;
        {local:do-eval(concat("fn:doc('/queries/", xs:unsignedLong($q/qconsole:id), ".txt')"), ())}
      &lt;/query&gt;

let $export := 
    &lt;export&gt;
      &lt;workspace name="{string($ws/qconsole:workspace/qconsole:name)}"&gt;
        {$queries}
      &lt;/workspace&gt;
    &lt;/export&gt;

return $export</query><query name="Query 3" focus="false" active="false" content-source="as:5565535034147950703:" mode="xquery">xquery version "1.0-ml";

declare namespace qconsole="http://marklogic.com/appservices/qconsole";

declare variable $user as xs:string := "admin";
declare variable $workspace as xs:string := "Workspace";

declare function local:do-eval($query as xs:string, $vars) {
  xdmp:eval($query, $vars, 
      &lt;options xmlns="xdmp:eval"&gt;
      &lt;database&gt;{xdmp:database("App-Services")}&lt;/database&gt;
      &lt;/options&gt;)
};

declare function local:get-ws-uri($user as xs:string, $workspace as xs:string) {
  let $ws-query := 'xquery version "1.0-ml";
    declare namespace qconsole = "http://marklogic.com/appservices/qconsole";
    declare variable $user as xs:string external;
    declare variable $workspace as xs:string external";
    cts:uris((), (), cts:and-query((
        cts:directory-query("/workspaces/"),
        cts:element-value-query(xs:QName("qconsole:userid"), xs:string(xdmp:user($user))) 
        cts:element-value-query(xs:QName("qconsole:name"), $workspace)
    ))
    )'
  return local:do-eval($ws-query, (xs:QName("user"), $user))
};

declare function local:get-workspace($ws-uri as xs:string) {
  let $query := "declare variable $ws-uri as xs:string external; fn:doc($ws-uri)"
  return local:do-eval($query, (xs:QName("ws-uri"), $ws-uri))
};

let $workspace := ($workspace, "Workspace")[1]
let $user := ($user, xdmp:get-current-user())[1]

let $ws-uri := local:get-ws-uri($user, $workspace)
let $ws := local:get-workspace($ws-uri)
let $queries := for $q in $ws/qconsole:workspace/qconsole:queries/qconsole:query
    return 
    &lt;query name="{string($q/qconsole:name)}" focus="{string($q/qconsole:focus)}" active="{string($q/qconsole:active)}" mode="{string($q/qconsole:mode)}"&gt;
    {local:do-eval(concat("fn:doc('/queries/", xs:unsignedLong($q/qconsole:id), ".txt')"), ())}
    &lt;/query&gt;

let $export := 
    &lt;export&gt;
    &lt;workspace name="{string($ws/qconsole:workspace/qconsole:name)}"&gt;
    {$queries}
    &lt;/workspace&gt;
    &lt;/export&gt;

return $export</query><query name="Query 4" focus="false" active="false" content-source="as:14272771097626930776:" mode="xquery">xquery version "1.0-ml";
    declare namespace qconsole = "http://marklogic.com/appservices/qconsole";
    declare variable $user as xs:string external;
    declare variable $workspace as xs:string external;
    cts:uris((), (), cts:and-query((
        cts:directory-query("/workspaces/"),
        cts:element-value-query(xs:QName("qconsole:userid"), xs:string(xdmp:user($user))) 
        cts:element-value-query(xs:QName("qconsole:name"), $workspace)
    ))
    )</query><query name="Query 5" focus="true" active="true" content-source="as:5565535034147950703:" mode="xquery">xquery version "1.0-ml";

declare namespace qconsole="http://marklogic.com/appservices/qconsole";

import module namespace amped-qconsole = "http://marklogic.com/appservices/qconsole/util-amped" at "/MarkLogic/appservices/qconsole/qconsole-amped.xqy";
import module namespace idecl = "http://marklogic.com/appservices/qconsole/decl" at "/MarkLogic/appservices/qconsole/qconsole-decl.xqy";
import module namespace qconsole-model = "http://marklogic.com/appservices/qconsole/model" at "/MarkLogic/appservices/qconsole/qconsole-model.xqy";


declare variable $export as element(export) := &lt;export&gt;&lt;workspace name="Workspace"&gt;&lt;query name="Query 1" focus="false" active="true" mode="xquery"&gt;fn:doc("/foo/doc2.xml")&lt;/query&gt;&lt;/workspace&gt;&lt;/export&gt; ;
declare variable $user as xs:string := "test";

declare function local:do-eval($query as xs:string, $vars) {
  xdmp:eval($query, $vars, 
      &lt;options xmlns="xdmp:eval"&gt;
      &lt;database&gt;{xdmp:database("App-Services")}&lt;/database&gt;
      &lt;/options&gt;)
};

declare function local:import-workspace(
    $workspace as element(export),
    $user as xs:string 
) as element(workspace)
{

    let $eval-query :=
       'declare namespace qconsole = "http://marklogic.com/appservices/qconsole";
        import module namespace qconsole-model="http://marklogic.com/appservices/qconsole/model"
            at "/MarkLogic/appservices/qconsole/qconsole-model.xqy";
        import module namespace amped-qconsole = "http://marklogic.com/appservices/qconsole/util-amped"
            at "/MarkLogic/appservices/qconsole/qconsole-amped.xqy";
        declare variable $xquery-query-template as xs:string external;
        declare variable $user as xs:string external;
        declare variable $workspace as element(export) external;

        let $wsid := xdmp:random()
        let $imported-wsname := string($workspace/workspace/@name)
        let $existing-wsnames := amped-qconsole:qconsole-get-user-workspaces(())/qconsole:name/string()
        let $wsname :=
            if( $imported-wsname = $existing-wsnames )
            then qconsole-model:generate-workspace-name(())
            else $imported-wsname
        let $queries := $workspace/workspace/query
        let $userid := "12195789764685656724"
        let $ws :=  &lt;qconsole:workspace&gt;
                        &lt;qconsole:id&gt;{$wsid}&lt;/qconsole:id&gt;
                        &lt;qconsole:name&gt;{$wsname}&lt;/qconsole:name&gt;
                        &lt;qconsole:security&gt;
                            &lt;qconsole:userid&gt;{$userid}&lt;/qconsole:userid&gt;
                        &lt;/qconsole:security&gt;
                        &lt;qconsole:active&gt;true&lt;/qconsole:active&gt;
                        &lt;qconsole:queries&gt;
                            {
                            for $q at $i in $queries
                            let $qid := xdmp:random()
                            let $qname := string($q/@name)
                            let $focus := string($q/@focus)
                            let $active := string($q/@active)
                            let $content-source :=
                                if ( exists($q/@content-source) )
                                then string($q/@content-source)
                                else qconsole-model:default-content-source()
                            let $mode := string($q/@mode)
                            let $query-text := text { $q }
                            let $q-uri := concat("/queries/", $qid, ".txt")
                            let $save-q := amped-qconsole:qconsole-document-insert($q-uri, $query-text)
                            return
                            &lt;qconsole:query&gt;
                                &lt;qconsole:id&gt;{$qid}&lt;/qconsole:id&gt;
                                &lt;qconsole:name&gt;{$qname}&lt;/qconsole:name&gt;
                                &lt;qconsole:content-source&gt;{$content-source}&lt;/qconsole:content-source&gt;
                                &lt;qconsole:active&gt;{$active}&lt;/qconsole:active&gt;
                                &lt;qconsole:focus&gt;{$focus}&lt;/qconsole:focus&gt;
                                &lt;qconsole:mode&gt;{$mode}&lt;/qconsole:mode&gt;
                            &lt;/qconsole:query&gt;
                            }
                        &lt;/qconsole:queries&gt;
                    &lt;/qconsole:workspace&gt;
        let $ws-uri := concat("/workspaces/", $wsid, ".xml")
        let $save-ws := amped-qconsole:qconsole-document-insert($ws-uri, $ws)
        let $set-active := qconsole-model:set-only-one-workspace-active($wsid)

        return
            $wsid'

    let $new-wsid := amped-qconsole:qconsole-eval($eval-query,
                                                    (xs:QName("workspace"), $workspace,
                                                     xs:QName("xquery-query-template"), $idecl:default-query-text, 
                                                     xs:QName("user"), $user), ())
    return
        &lt;workspace&gt;
            {qconsole-model:get-workspaces($new-wsid)/workspace/*}
        &lt;/workspace&gt;
};


local:import-workspace($export, $user)
</query><query name="Query 6" focus="false" active="true" content-source="2087162296836489576:0:Apps" mode="xquery">xquery version "1.0-ml";
cts:uris((), (), cts:word-query("test"))</query></workspace></export>
